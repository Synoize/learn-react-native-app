--> Complete Setup for Android Application

Install Chocolatey : https://chocolatey.org/install

Install Node.js : https://nodejs.org/en/download

choco install -y nodejs-lts microsoft-openjdk17 

Download Android Studio : https://developer.android.com/studio

Docs: https://reactnative.dev/docs/set-up-your-environment

--> Create a Project from Scratch:

npx react-native init .
npx @react-native-community/cli init myApp
cd myApp
npm i

--> for run start - npx react-native start
--> for run doctor - npx react-native doctor
--> for run android emulator - npx react-native run-android
--> show logs for android - npx react-native log-android

--> First Program :

<View style={backgroundStyle}>
      <StatusBar
        barStyle={isDarkMode ? 'light-content' : 'dark-content'}
        backgroundColor={backgroundStyle.backgroundColor}
      />
      <ScrollView
        style={backgroundStyle}>
        <View style={{paddingRight: safePadding}}>
          <Header/>
        </View>
        <View
          style={{
            backgroundColor: isDarkMode ? Colors.black : Colors.white,
            paddingHorizontal: safePadding,
            paddingBottom: safePadding,
          }}>
          <Section title="Step One">
            Edit <Text style={styles.highlight}>App.tsx</Text> to change this
            screen and then come back to see your edits.
          </Section>
          <Section title="See Your Changes">
            <ReloadInstructions />
          </Section>
          <Section title="Debug">
            <DebugInstructions />
          </Section>
          <Section title="Learn More">
            Read the docs to discover what to do next:
          </Section>
          <LearnMoreLinks />
        </View>
      </ScrollView>
</View>

--> for again start app - npx react-native start

--> Folder Structure :

MyReactNativeApp/
│── android/             # Native Android code
│── ios/                 # Native iOS code
│── src/                 # Main source folder
│   ├── components/      # Reusable UI components (Header, Footer, Buttons, etc.)
│   │   ├── Header.js
│   │   ├── Footer.js
│   ├── layouts/         # Layout components
│   │   ├── Layout.js    # Main layout wrapper
│   ├── screens/         # Screens/pages
│   │   ├── HomeScreen.js
│   │   ├── ProfileScreen.js
│   ├── navigation/      # React Navigation setup
│   │   ├── AppNavigator.js
│   ├── assets/          # Images, fonts, icons
│   │   ├── images/
│   │   ├── fonts/
│   ├── styles/          # Global styles
│   │   ├── colors.js
│   │   ├── typography.js
│   ├── utils/           # Helper functions, constants
│   │   ├── helpers.js
│   │   ├── constants.js
│   ├── services/        # API calls, authentication
│   │   ├── api.js
│   ├── context/         # Context API (global state management)
│   │   ├── AuthContext.js
│   ├── redux/           # Redux store, actions, reducers (if using Redux)
│   │   ├── store.js
│   │   ├── actions/
│   │   ├── reducers/
│── App.js               # Main entry file
│── index.js             # Entry point for the app
│── package.json         # Dependencies and scripts
│── babel.config.js      # Babel configuration
│── metro.config.js      # Metro bundler configuration
│── .gitignore           # Git ignore file
│── node_modules/        # Installed dependencies


--> FlstList : Render list of items in react native
--> SectionList 
--> Map
--> ClassComponent
--> Grid & Flex
--> Hooks
  > useState
  > useEffect

--> ConditionalRendering 

--> Pressable 

--> Modal - Diglock Box

--> Platform - Devices

--> Website into Application
<WebView source={{ uri: 'https://learncontext.netlify.app/' }} style={{ flex: 1 }} />

--> Navigation
  > Type - Stack, Drawer, Tab

--> Stack Navigation
  > npm i @react-navigation/native
  > npm i @react-navigation/native-stack // Stack = createNativeStackNavigator()

  > App.jsx
    <NavigationContainer>
      <Stack.Navigator screenOptions={{}}>
         <Stack.Screen name="name" component={component} options={{ headerShown: true }} />
      </Stack.Navigator screenOptions={{}}>
    </NavigationContainer>

  > HomeScreen.jsx
    const navigation = useNavigation();
    navigation.navigate("OtherScreen");

--> Bottom Tab Navigation
  > npm i @react-navigation/native
  > npm i @react-navigation/bottom-tabs // Tab = createBottomTabNavigator();

  > App.jsx
    <NavigationContainer>
      <Tab.Navigator screenOptions={{}}>
         <Tab.Screen name="name" component={component} options={{ headerShown: true }} />
      </Tab.Navigator screenOptions={{}}>
    </NavigationContainer>

  > HomeScreen.jsx
    const navigation = useNavigation();
    navigation.navigate("OtherScreen");

--> Top Tab Navigation
  > npm i @react-navigation/native
  > npm i @react-navigation/material-top-tabs // TopTab = createMaterialTopTabNavigator();

  > App.jsx
    <NavigationContainer>
      <TopTab.Navigator screenOptions={{}}>
         <TopTab.Screen name="name" component={component} options={{ headerShown: true }} />
      </TopTab.Navigator screenOptions={{}}>
    </NavigationContainer>

  > HomeScreen.jsx
    const navigation = useNavigation();
    navigation.navigate("OtherScreen");

--> Drawer Navigation
  > npm install @react-navigation/drawer
  > npm install react-native-gesture-handler react-native-reanimated


--> Fetch API : Map & FlatList

--> JSON Server - Make db file Get API data with Postman
  > npm i -g json-server : imstall json-server globally
  > create file inside the server : db.json
  > npx json-server db.json : start server
  > Endpoints : http://localhost:3000/users
  > In Local DB use in Methods : Post, Get, Put, Patch, Delete, Update

--> Fetch Api from Local server using IP & Another method
  > run json-server with IP Address : http://192.168.211.29:3000/users

  > another method : Ngrok
    > choco install ngrok
    > ngrok config add-authtoken 2wLdt8k83KiEWkPyjFr6x2CFqzM_5RpeQjYAEJsAcHKA1q72C : https://ngrok.com/downloads/windows
    > ngrok http http://localhost:3000

    > fetch api : https://e6ad-2409-40e5-116b-c808-a8fa-693d-600f-167e.ngrok-free.app/users

--> Post Api : post data n local json database server using form 
--> Validate this form

--> Get request with JSON Api and render the Data in Table using flatlist
    
    